{"version":3,"sources":["store/reducers/auth/auth-action-creator.ts","utils/rules.ts","api/api.ts","store/reducers/event/event-action-creator.ts","router/index.ts","store/reducers/actionstCreators.ts","hooks/useActions.ts","components/LoginForm.tsx","page/Login.tsx","utils/date.ts","components/EventCalendar.tsx","components/EventForm.tsx","page/Event.tsx","components/AppRouter.tsx","components/NavBar.tsx","App.tsx","store/reducers/auth/authReducer.ts","store/reducers/event/eventReducer.ts","store/store.ts","index.tsx"],"names":["AuthActionEnum","rules","message","required","validator","_","value","isSameOrAfter","moment","Promise","resolve","reject","Error","instance","axios","create","baseURL","usersService","get","EventActionEnum","SET_IS_AUTH","SET_ERROR","SET_USER","SET_IS_LOADING","AuthActionCreators","setUser","user","type","payload","setIsAuth","auth","setError","setIsLoading","login","userName","password","dispatch","a","setTimeout","response","mockUser","data","find","username","localStorage","setItem","e","logout","removeItem","RouteNames","SET_EVENTS","SET_GUESTS","EventActionCreators","setGuests","setEvents","fetchGuests","createEvent","event","events","getItem","json","JSON","parse","push","stringify","fetchEvent","currentUserEvents","filter","ev","author","guest","allActionCreators","useActions","useDispatch","bindActionCreators","LoginForm","useSelector","state","isLoading","error","useState","setUserName","setSetPassword","submit","useCallback","onFinish","Item","label","name","onChange","currentTarget","Password","style","color","wrapperCol","offset","span","htmlType","loading","Login","React","memo","justify","align","className","formatDate","date","year","getFullYear","month","getMonth","day","getDate","EventCalendar","dateCellRender","fDate","toDate","currentDayEvents","map","index","description","EventForm","guests","setEvent","target","selectDate","Option","Event","modalVisible","setModalVisible","useEffect","addNewEvent","margin","backgroundColor","onClick","title","visible","footer","onCancel","publicRoutes","path","LOGIN","exact","component","privateRoutes","EVENT","AppRouter","isAuth","route","to","NavBar","router","useHistory","theme","mode","selectable","App","Content","authState","eventState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78333470.chunk.js","sourcesContent":["import {IUser} from \"./authReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersService} from \"../../../api/api\";\r\n\r\nexport enum AuthActionEnum {\r\n    SET_IS_AUTH = 'SET_AUTH',\r\n    SET_ERROR = 'SET_ERROR',\r\n    SET_USER = 'SET_USER',\r\n    SET_IS_LOADING = 'SET_IS_LOADING',\r\n}\r\n\r\nconst {SET_IS_AUTH, SET_ERROR, SET_USER, SET_IS_LOADING} = AuthActionEnum\r\n\r\nexport const AuthActionCreators = {\r\n    setUser: (user: IUser) => ({type: SET_USER, payload: user} as const),\r\n    setIsAuth: (auth: boolean) => ({type: SET_IS_AUTH, payload: auth} as const),\r\n    setError: (payload: string) => ({type: SET_ERROR, payload} as const),\r\n    setIsLoading: (payload: boolean) => ({type: SET_IS_LOADING, payload} as const),\r\n    login: (userName: string, password: string) => async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(AuthActionCreators.setIsLoading(true))\r\n            setTimeout(async () => {\r\n                const response = await usersService.getUsers()\r\n                const mockUser = response.data.find(user => user.username === userName && user.password === password)\r\n                if (mockUser) {\r\n                    localStorage.setItem('auth', 'true')\r\n                    localStorage.setItem('userName', mockUser.username)\r\n                    dispatch(AuthActionCreators.setUser(mockUser))\r\n                    dispatch(AuthActionCreators.setIsAuth(true))\r\n                } else {\r\n                    dispatch(AuthActionCreators.setError('Некоректный логин или пороль'))\r\n                }\r\n                dispatch(AuthActionCreators.setIsLoading(false))\r\n            }, 1000)\r\n        } catch (e) {\r\n            dispatch(AuthActionCreators.setError('Произошла ошибка при логине'))\r\n        }\r\n    },\r\n    logout: () => async (dispatch: Dispatch) => {\r\n        dispatch(AuthActionCreators.setIsAuth(true))\r\n        localStorage.removeItem('auth')\r\n        localStorage.removeItem('userName')\r\n        dispatch(AuthActionCreators.setUser({} as IUser))\r\n        dispatch(AuthActionCreators.setIsAuth(false))\r\n    },\r\n}\r\nexport  type AuthActions = ReturnType<typeof AuthActionCreators.setUser> |\r\n    ReturnType<typeof AuthActionCreators.setIsAuth> |\r\n    ReturnType<typeof AuthActionCreators.setError> |\r\n    ReturnType<typeof AuthActionCreators.setIsLoading>\r\n","import moment, {Moment} from \"moment\";\r\n\r\nexport const rules = {\r\n    required: (message = 'Required field') => ({required: true, message}),\r\n    isDateAfter: (message: string) => () => ({\r\n        validator(_: any, value: Moment) {\r\n            if (value.isSameOrAfter(moment())) {\r\n                return Promise.resolve()\r\n            }\r\n            return Promise.reject(new Error(message))\r\n        }\r\n    })\r\n}","import axios from \"axios\";\r\nimport {IUser} from \"../store/reducers/auth/authReducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: `./users.json`,\r\n})\r\n\r\nexport const usersService = {\r\n    getUsers() {\r\n        return instance.get<IUser[]>(``)\r\n    }\r\n}","import {IUser} from \"../auth/authReducer\";\r\nimport {IEventType} from \"../../../components/EventCalendar\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersService} from \"../../../api/api\";\r\n\r\n\r\nexport type EventAction = ReturnType<typeof EventActionCreators.setGuests>\r\n    | ReturnType<typeof EventActionCreators.setEvents>\r\n\r\nexport enum EventActionEnum {\r\n    SET_GUESTS = 'SET_GUESTS',\r\n    SET_EVENTS = 'SET_EVENTS',\r\n}\r\n\r\nconst {SET_EVENTS, SET_GUESTS} = EventActionEnum\r\nexport const EventActionCreators = {\r\n    setGuests: (payload: IUser[]) => ({type: SET_GUESTS, payload} as const),\r\n    setEvents: (payload: IEventType[]) => ({type: SET_EVENTS, payload} as const),\r\n    fetchGuests: () => async (dispatch: Dispatch) => {\r\n        try {\r\n            const response = await usersService.getUsers()\r\n            dispatch(EventActionCreators.setGuests(response.data))\r\n        } catch (e) {\r\n        }\r\n    },\r\n    createEvent: (event: IEventType) => async (dispatch: Dispatch) => {\r\n        try {\r\n            const events = localStorage.getItem('events') || '[]'\r\n            const json = JSON.parse(events) as IEventType[]\r\n            json.push(event)\r\n            dispatch(EventActionCreators.setEvents(json))\r\n            localStorage.setItem('events', JSON.stringify(json))\r\n        } catch (e) {\r\n        }\r\n    },\r\n    fetchEvent: (userName: string) => async (dispatch: Dispatch) => {\r\n        try {\r\n            const events = localStorage.getItem('events') || '[]'\r\n            const json = JSON.parse(events) as IEventType[]\r\n            const currentUserEvents = json.filter(ev => ev.author === userName || ev.guest === userName)\r\n            dispatch(EventActionCreators.setEvents(currentUserEvents))\r\n        } catch (e) {\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport {Login} from \"../page/Login\";\r\nimport {Event} from \"../page/Event\";\r\n\r\nexport type IRoute = {\r\n    path: string\r\n    component: React.ComponentType\r\n    exact?: boolean\r\n}\r\n\r\nexport enum RouteNames {\r\n    LOGIN = `/login`,\r\n    EVENT = `/`,\r\n}\r\n\r\nexport const publicRoutes: IRoute[] = [\r\n    {path: RouteNames.LOGIN, exact: true, component: Login}\r\n]\r\nexport const privateRoutes: IRoute[] = [\r\n    {path: RouteNames.EVENT, exact: true, component: Event}\r\n]\r\n","import {AuthActionCreators} from \"./auth/auth-action-creator\";\r\nimport {EventActionCreators} from \"./event/event-action-creator\";\r\n\r\nexport const allActionCreators = {...AuthActionCreators, ...EventActionCreators,}","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {allActionCreators} from \"../store/reducers/actionstCreators\";\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch()\r\n    return bindActionCreators(allActionCreators, dispatch)\r\n}","import React, {FC, useCallback, useState} from 'react';\r\nimport {Button, Form, Input} from \"antd\";\r\nimport {rules} from \"../utils/rules\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/store\";\r\nimport {AuthStateType} from \"../store/reducers/auth/authReducer\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nexport const LoginForm: FC = () => {\r\n    const {isLoading, error} = useSelector<RootState, AuthStateType>(state => state.auth)\r\n    // кастомный хук\r\n    const {login} = useActions()\r\n    const [userName, setUserName] = useState('user')\r\n    const [password, setSetPassword] = useState('123')\r\n    const submit = useCallback(() => login(userName, password), [login, userName, password])\r\n    return (\r\n        <Form onFinish={submit}>\r\n            <Form.Item\r\n                label=\"Username\"\r\n                name=\"username\"\r\n                rules={[rules.required('Enter your username!')]}>\r\n                <Input value={userName} onChange={e => setUserName(e.currentTarget.value)}/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                rules={[rules.required('Enter your password!')]}>\r\n                <Input.Password value={password} onChange={e => setSetPassword(e.currentTarget.value)}/>\r\n            </Form.Item>\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n            <Form.Item wrapperCol={{offset: 8, span: 16}}>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n            <div>login: user, password: 123</div>\r\n        </Form>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Card, Layout, Row} from \"antd\";\r\nimport {LoginForm} from \"../components/LoginForm\";\r\n\r\nexport const Login = React.memo(() => {\r\n    return (\r\n        <Layout>\r\n            <Row justify={'center'} align={'middle'} className={'h100'}>\r\n                <Card>\r\n                    <LoginForm/>\r\n                </Card>\r\n            </Row>\r\n        </Layout>\r\n    );\r\n});\r\n\r\n","export const formatDate = (date: Date): string => {\r\n    const year = date.getFullYear()\r\n    const month = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\r\n    const day = date.getDate() < 10 ? `0${date.getDate() + 1}` : date.getDate() + 1\r\n    return `${year}.${month}.${day}`\r\n}","import React, {FC} from 'react';\r\nimport {Calendar} from \"antd\";\r\nimport {Moment} from \"moment\";\r\nimport {formatDate} from \"../utils/date\";\r\n\r\nexport  type IEventType = {\r\n    author: string;\r\n    guest: string\r\n    date: string\r\n    description: string\r\n}\r\ntype EventCalendarType = { events: IEventType[] }\r\n\r\nexport const EventCalendar: FC<EventCalendarType> = ({events}) => {\r\n    const dateCellRender = (value: Moment) => {\r\n        const fDate = formatDate(value.toDate())\r\n        const currentDayEvents = events.filter(ev => ev.date === fDate)\r\n        return (\r\n            <div>\r\n                {currentDayEvents.map((ev, index) =>\r\n                    <div key={index}>{ev.description}</div>)}\r\n            </div>);\r\n    }\r\n    return (\r\n        <Calendar dateCellRender={dateCellRender}/>\r\n    );\r\n};\r\n\r\n","import React, {FC, useState} from 'react';\r\nimport {Button, DatePicker, Form, Input, Row, Select} from \"antd\";\r\nimport {rules} from \"../utils/rules\";\r\nimport {AuthStateType, IUser} from \"../store/reducers/auth/authReducer\";\r\nimport {IEventType} from \"./EventCalendar\";\r\nimport {Moment} from \"moment\";\r\nimport {formatDate} from \"../utils/date\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/store\";\r\n\r\ntype EventFormType = {\r\n    guests: IUser[],\r\n    submit: (event: IEventType) => void\r\n}\r\nexport const EventForm: FC<EventFormType> = ({guests, submit}) => {\r\n    const [event, setEvent] = useState<IEventType>({\r\n        author: '',\r\n        date: '',\r\n        description: '',\r\n        guest: '',\r\n    } as IEventType)\r\n    const {user} = useSelector<RootState, AuthStateType>(state => state.auth)\r\n    const selectDate = (date: Moment | null) => {\r\n        if (date) {\r\n            setEvent({...event, date: formatDate(date.toDate())})\r\n        }\r\n    }\r\n    const submitForm = () => submit({...event, author: user.username})\r\n    return (\r\n        <Form onFinish={submitForm}>\r\n            <Form.Item\r\n                label=\"Name event\"\r\n                name=\"description\"\r\n                rules={[rules.required('Event description')]}>\r\n                <Input value={event.description} onChange={e => setEvent({...event, description: e.target.value})}/>\r\n            </Form.Item>\r\n            <Form.Item label=\"Event date\"\r\n                       name=\"date\"\r\n                       rules={[rules.required(), rules.isDateAfter('Нельзя создать событие в прошлом')]}>\r\n                <DatePicker onChange={(date) => selectDate(date)}/>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Select onChange={(guest: string) => setEvent({...event, guest})}>\r\n                    {guests.map(guest =>\r\n                        <Select.Option key={guest.username} value={guest.username}>\r\n                            {guest.username}\r\n                        </Select.Option>\r\n                    )}\r\n                </Select>\r\n            </Form.Item>\r\n            <Row justify={'center'}>\r\n                <Form.Item wrapperCol={{offset: 8, span: 16}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Create\r\n                    </Button>\r\n                </Form.Item>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {EventCalendar, IEventType} from \"../components/EventCalendar\";\r\nimport {Button, Layout, Modal, Row} from \"antd\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport {EventForm} from \"../components/EventForm\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/store\";\r\nimport {EventStateType} from \"../store/reducers/event/eventReducer\";\r\nimport {AuthStateType} from \"../store/reducers/auth/authReducer\";\r\n\r\nexport const Event = React.memo(() => {\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const {user} = useSelector<RootState, AuthStateType>(state => state.auth)\r\n    const {guests, events} = useSelector<RootState, EventStateType>(state => state.event)\r\n    const {fetchGuests, createEvent, fetchEvent} = useActions()\r\n    useEffect(() => {\r\n        fetchGuests()\r\n        fetchEvent(user.username)\r\n    }, [])\r\n    const addNewEvent = useCallback((event: IEventType) => {\r\n        setModalVisible(false)\r\n        createEvent(event)\r\n    }, [])\r\n    return (\r\n        <Layout style={{margin: '5px'}}>\r\n            <EventCalendar events={events}/>\r\n            <Row justify={'center'}>\r\n                <Button style={{backgroundColor: 'azure'}} onClick={() => setModalVisible(true)}>Add event</Button>\r\n            </Row>\r\n            <Modal title=\"Add event\" visible={modalVisible} footer={null} onCancel={() => setModalVisible(false)}>\r\n                <EventForm guests={guests} submit={addNewEvent}/>\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n});\r\n\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {privateRoutes, publicRoutes, RouteNames} from \"../router\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/store\";\r\nimport {AuthStateType} from \"../store/reducers/auth/authReducer\";\r\n\r\nexport const AppRouter = () => {\r\n    const {isAuth} = useSelector<RootState, AuthStateType>(state => state.auth)\r\n    return (\r\n        isAuth\r\n            ? <Switch>{privateRoutes.map(route =>\r\n                <Route path={route.path} exact={route.exact} component={route.component} key={route.path}/>)}\r\n                <Redirect to={RouteNames.EVENT}/>\r\n            </Switch>\r\n            : <Switch>{publicRoutes.map(route =>\r\n                <Route path={route.path} exact={route.exact} component={route.component} key={route.path}/>)}\r\n                <Redirect to={RouteNames.LOGIN}/>\r\n            </Switch>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Header} from \"antd/es/layout/layout\";\r\nimport {Menu, Row} from 'antd';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {RouteNames} from \"../router\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/store\";\r\nimport {AuthStateType} from \"../store/reducers/auth/authReducer\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nexport const NavBar = React.memo(() => {\r\n    const router = useHistory()\r\n    const {isAuth, user} = useSelector<RootState, AuthStateType>(state => state.auth)\r\n    const {logout} = useActions()\r\n    return (\r\n        <Header>\r\n            <Row justify={'end'}>\r\n                {isAuth\r\n                    ? <>\r\n                        <div style={{color: 'white'}}>{user.username}</div>\r\n                        <Menu theme={'dark'} mode={'horizontal'} selectable={false}>\r\n                            <Menu.Item onClick={logout} key={1}>\r\n                                Logout\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </>\r\n                    : <Menu theme={'dark'} mode={'horizontal'} selectable={false}>\r\n                        <Menu.Item onClick={() => router.push(RouteNames.LOGIN)} key={1}>\r\n                            LOGIN\r\n                        </Menu.Item>\r\n                    </Menu>}\r\n            </Row>\r\n        </Header>\r\n    );\r\n});\r\n","import React, {useEffect} from 'react';\nimport {AppRouter} from \"./components/AppRouter\";\nimport {Layout} from \"antd\";\nimport {NavBar} from \"./components/NavBar\";\nimport './App.css'\nimport {useActions} from \"./hooks/useActions\";\nimport {IUser} from \"./store/reducers/auth/authReducer\";\n\nexport const App = () => {\n    const {setUser, setIsAuth} = useActions()\n    useEffect(() => {\n        if (localStorage.getItem('auth')) {\n            setUser({username: localStorage.getItem('userName' || '')} as IUser)\n            setIsAuth(true)\n        }\n    }, [])\n    return (\n        <Layout>\n            <NavBar/>\n            <Layout.Content>\n                <AppRouter/>\n            </Layout.Content>\n        </Layout>\n    );\n}\n","import {AuthActionEnum, AuthActions} from \"./auth-action-creator\";\r\n\r\nexport type IUser = { username: string, password: string }\r\nexport type AuthStateType = {\r\n    isAuth: boolean\r\n    user: IUser\r\n    isLoading: boolean\r\n    error: string\r\n}\r\nconst authState: AuthStateType = {\r\n    isAuth: false,\r\n    user: {} as IUser,\r\n    isLoading: false,\r\n    error: '',\r\n}\r\nconst {SET_IS_AUTH, SET_ERROR, SET_USER, SET_IS_LOADING} = AuthActionEnum\r\n\r\nexport const authReducer = (state: AuthStateType = authState, action: AuthActions): AuthStateType => {\r\n    switch (action.type) {\r\n        case SET_IS_AUTH:\r\n            return {...state, isAuth: action.payload}\r\n        case SET_USER:\r\n            return {...state, user: action.payload}\r\n        case SET_ERROR:\r\n            return {...state, error: action.payload}\r\n        case SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {IUser} from \"../auth/authReducer\";\r\nimport {IEventType} from \"../../../components/EventCalendar\";\r\nimport {EventAction, EventActionEnum} from \"./event-action-creator\";\r\n\r\nexport type EventStateType = {\r\n    guests: IUser[],\r\n    events: IEventType[]\r\n}\r\nexport const eventState: EventStateType = {\r\n    events: [],\r\n    guests: [],\r\n}\r\nconst {SET_EVENTS, SET_GUESTS} = EventActionEnum\r\nexport const eventReducer = (state: EventStateType = eventState, action: EventAction): EventStateType => {\r\n    switch (action.type) {\r\n        case SET_GUESTS:\r\n            return {...state, guests: action.payload}\r\n        case SET_EVENTS:\r\n            return {...state, events: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"./reducers/auth/authReducer\";\r\nimport {eventReducer} from \"./reducers/event/eventReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    event: eventReducer,\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = ReturnType<typeof store.dispatch>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter, Router} from 'react-router-dom';\nimport {App} from './App';\nimport {store} from \"./store/store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n                <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n)\n;\n\n"],"sourceRoot":""}